{{ 'section-reviews.css' | asset_url | stylesheet_tag }}

{% schema %}
  {
    "name": "Feedbacks dos usuários",
    "settings": [
      {
        "type": "text",
        "id": "title",
        "label": "Título da seção de reviews",
        "default": "Real Reviews, Real Experiences"
      },
      {
        "type": "number",
        "id": "rating",
        "label": "Rating atual",
        "default": 0
      },
      {
        "type": "text",
        "id": "subtitle",
        "label": "Subtitle da seção de reviews",
        "default": "With 1600+ 5-star reviews"
      },
      {
        "type": "range",
        "id": "products_per_page",
        "min": 4,
        "max": 48,
        "step": 4,
        "default": 4,
        "label": "Products per page"
      }
    ],
    "blocks": [
      {
        "type": "custom_review",
        "name": "Review personalizado",
        "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Nome da pessoa",
            "default": "Pessoa"
          },
          {
            "type": "textarea",
            "id": "description",
            "label": "Descrição",
            "default": "Descrição do review."
          },
          {
            "type": "image_picker",
            "id": "image",
            "label": "Imagem do produto"
          },
          {
            "type": "number",
            "id": "rating",
            "label": "Nota (0 a 5)",
            "default": 5
          },
          {
            "type": "text",
            "id": "state",
            "label": "Localização",
            "default": "United States"
          },
          {
            "type": "image_picker",
            "id": "image_product_buy",
            "label": "Imagem do produto"
          },
          {
            "type": "text",
            "id": "product_name",
            "label": "Nome do produto",
            "default": "Product Name"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Reviews dinâmicos",
        "category": "Testimonials",
        "blocks": [
          {
            "type": "custom_review"
          }
        ]
      }
    ]
  }
{% endschema %}


<div class="control-container reviews-container" id="product-reviews">
  <h3>{{ section.settings.title }}</h3>

  <div class="subtitle">
    <span>{{ section.settings.subtitle }}</span>
    {% render 'stars-rating'
      , rating: section.settings.rating %}
  </div>

  <div class="list-review" id="reviews-list">
    {% for block in section.blocks %}
      {% if block.type == 'custom_review' %}
        <div
          class="review-item"
          style="display: none;"
          data-index="{{ forloop.index0 }}">
          {% render 'reviews-card'
            , title: block.settings.title
            , state: block.settings.state
            , description: block.settings.description
            , rating: block.settings.rating
            , image: block.settings.image
            , product_image: block.settings.image_product_buy
            , product: block.settings.product_name %}
        </div>
      {% endif %}
    {% endfor %}
  </div>

  {% assign total_reviews = section.blocks.size %}
  {% assign per_page = section.settings.products_per_page | default: 4 %}
  {% assign total_pages = total_reviews | divided_by: per_page | ceil %}

  {% if total_pages >= 1 %}
    <div
      class="pagination-container"
      id="pagination-controls"
      style="margin-top:30px; display: flex; justify-content: center; gap: 8px; flex-wrap: wrap;"></div>
  {% endif %}
</div>


<script>
  document.addEventListener('DOMContentLoaded', function () {
    const reviews = Array.from(document.querySelectorAll('.review-item'));
    const perPage = {{ section.settings.products_per_page | default: 4 }};
    const totalPages = Math.ceil(reviews.length / perPage);
    const paginationContainer = document.getElementById('pagination-controls');
    let currentPage = 1;

    function showPage(page) {
      reviews.forEach((el, index) => {
        el.style.display = (index >= (page - 1) * perPage && index < page * perPage) ? 'block' : 'none';
      });
      currentPage = page;
      renderPagination();
    }

    function renderPagination() {
      paginationContainer.innerHTML = '';

      const createPageButton = (text, page, isActive = false, isDisabled = false) => {
        const btn = document.createElement('button');
        btn.textContent = text;
        btn.disabled = isDisabled;

        if (isActive) {
          btn.classList.add('active-page');
        }

        btn.addEventListener('click', () => showPage(page));
        return btn;
      };

      paginationContainer.appendChild(createPageButton('‹', currentPage - 1, false, currentPage === 1));

      let start = Math.max(1, currentPage - 1);
      let end = Math.min(totalPages, currentPage + 1);

      if (start > 2) {
        paginationContainer.appendChild(createPageButton('1', 1));
        if (start > 3) {
          const dots = document.createElement('span');
          dots.textContent = '...';
          dots.className = 'text-gray-400';
          paginationContainer.appendChild(dots);
        }
      }

      for (let i = start; i <= end; i++) {
        paginationContainer.appendChild(createPageButton(i, i, i === currentPage));
      }

      if (end < totalPages - 1) {
        const dots = document.createElement('span');
        dots.textContent = '...';
        dots.className = 'text-gray-400';
        paginationContainer.appendChild(dots);
      }

      if (end < totalPages) {
        paginationContainer.appendChild(createPageButton(totalPages, totalPages));
      }

      paginationContainer.appendChild(createPageButton('›', currentPage + 1, false, currentPage === totalPages));
    }

    showPage(currentPage);
  });
</script>